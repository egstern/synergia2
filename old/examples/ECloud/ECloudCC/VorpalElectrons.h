#ifndef HAVE_ECLOUD_VORPALELECTRONS_H
#define HAVE_ECLOUD_VORPALELECTRONS_H
#include <vector>

//
// Interface between Vorpal and Synergia.  This reads the electrons data bank from the HDF5 files generated by Vorpal
// while running a problem..   
//


class aVorpalElectron {
  public:
    aVorpalElectron(const double *vDat);
    aVorpalElectron();
    double x;
    double betax;
    double y;
    double betay;
    double z;
    double betaz;
    double gamVx; 
    double gamVy; 
    double gamVz;
    // A bit of waste of memory, but we will be dealing with few particles in the context of 
    // benchmarking the accuracy of RKIntegrator. 
    double energy;
    double kineticEnergy;
    
    const static double MASS; 
    static const double speedOfLight;
};

class VorpalElectrons {
  
  public:
    VorpalElectrons(const char *fName);
    inline bool isFileValid() const {return gotIt; }
    inline std::vector<aVorpalElectron>::const_iterator begin() const {return data.begin();}
    inline std::vector<aVorpalElectron>::const_iterator end() const {return data.end();}
    inline size_t numElec() const {return data.size();}
    inline double getTime() const { return time;}
    inline int getStepNumber() const { return stepNum;} 
  
  private:
    bool gotIt;
    std::vector<aVorpalElectron> data; // the 6D phase space points 
    double time; // the independent integration variable, i.e., time 
    int stepNum; // the Vorpal step number
    const static std::string DATASET_NAME;
};  
#endif
