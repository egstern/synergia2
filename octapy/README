Octapy is a Python module to access Octave functionality from Python.
The current version is a proof-of-concept implementation. INSTALL
contains the build instructions.

Credits: The bulk of the code was taken from
	http://octave.sf.net/octave_embed.tar.gz
octave_embed was written by Paul Kienzle.

The demo.py file exercises the current functionality. Here is the
output:
python demo.py
********** Execute some code in Octave:
a = 1.1;
b = 2.2;
c = sqrt(-4.0);

********** See which variables are currently defined in Octave:
top level variables = ['a', 'b', 'c', 'LOADPATH']

********** Get the values of the variables back from Octave:
testing getting a from octave:
a = 1.1
testing getting b from octave:
b = 2.2
testing getting c from octave:
c = 2j

********** Set those variables directly from Python...
testing setting a in octave:
Python: a = 17
testing getting a from octave:
a = 17.0
testing setting b in octave:
Python: b = strings work, too
testing getting b from octave:
b = strings work, too

********** and a new one...
testing setting d in octave:
Python: d = (3+4j)
testing getting d from octave:
d = (3+4j)

********** Do something a little more complicated in Octave:
my_x = [1.0,2.0,7.0,9.0];
function [avg,dev] = get_stats(x)
    avg = mean(x);
    dev = std(x);
endfunction
[my_avg,my_dev] = get_stats(my_x);

testing getting my_avg from octave:
my_avg = 4.75
testing getting my_dev from octave:
my_dev = 3.86221007542

********** Sadly, vectors and matrices are not yet handled:
testing getting my_x from octave:
Octave.get_value: my_x has type matrix, which is not handled
my_x = None
testing setting x in octave:
Python: x = [1, 2, 3]
testing getting x from octave:
error: get_top_level_value: undefined symbol `x'
Octave.get_value: x has type <unknown type>, which is not handled
x = None
