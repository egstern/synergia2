cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
project(SYNERGIA2 VERSION 2.0.90 LANGUAGES CXX C)

enable_testing()
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_MODULE_PATH "${SYNERGIA2_SOURCE_DIR}/CMake")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  # using Clang
  set(COMPILER_SPECIFIC_CXX_FLAGS "-Wno-#pragma-messages -Wno-potentially-evalauted-expression")
  message("Using clang++")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    # using Apples's clang
    set(COMPILER_SPECIFIC_CXX_FLAGS "-Wno-#pragma-messages -Wno-potentially-evaluated-expression")
    message("Using Apple clang++")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # using GCC
  set(COMPILER_SPECIFIC_CXX_FLAGS "-Wno-error=unused-result")
  set(COMPILER_SPECIFIC_SHARED_LINKER_FLAGS "-Wl,-z,defs")
  message("Using g++")
else()
  message(FATAL_ERROR "I can not tell what compiler is being used.")
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-register ${COMPILER_SPECIFIC_CXX_FLAGS} -Werror")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${COMPILER_SPECIFIC_SHARED_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${COMPILER_SPECIFIC_SHARED_LINKER_FLAGS}")

# needed to avoid warnings about rpath policy on Mac OSX
# no known difference between "OLD" and "NEW" policies for us
if(POLICY CMP0042)
    cmake_policy(SET CMP0042 NEW)
endif()

# get version number generation right
if(POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif()

# Set defaults for building python bindings (build bindings by default).
if (NOT DEFINED BUILD_PYTHON_BINDINGS)
  if (NOT $ENV{BUILD_PYTHON_BINDINGS} STREQUAL "")
    set (BUILD_PYTHON_BINDINGS $ENV{BUILD_PYTHON_BINDINGS})
  else ()
    set (BUILD_PYTHON_BINDINGS TRUE)
  endif ()
endif ()

##
# Find necessary packages
##

# python
if (BUILD_PYTHON_BINDINGS)
  if (USE_PYTHON_3)
    message(STATUS "Trying to find python 3")
    # If we could use cmake v3.12 or newer, this is simple:
    #find_package(Python3 COMPONENTS Interpreter Development)
    set(Python_ADDITIONAL_VERSIONS "3")
  else()
    message(STATUS "Trying to find python 2")
    # If we could use cmake v3.12 or newer, this is simple:
    #find_package(Python2 COMPONENTS Interpreter Development)
    set(Python_ADDTIONAL_VERSIONS "2")
  endif()
else ()
  message (STATUS "Not building python bindings")
endif ()

# If we could use cmake v3.12 or newer, this would not be needed.
find_package(PythonInterp)
find_package(PythonLibs)
include_directories(${PYTHON_INCLUDE_DIR})

# MPI
find_package(MPI REQUIRED CXX)
execute_process(COMMAND ${MPIEXEC} --version OUTPUT_VARIABLE MPI_VERSION)
if(${MPI_VERSION} MATCHES "OpenRTE.* ")
    set(MPI_OVERSUBSCRIBE_FLAG "--oversubscribe")
else ()
    set(MPI_OVERSUBSCRIBE_FLAG "")
endif()
set(MPIEXEC_NUMPROC_FLAG ${MPI_OVERSUBSCRIBE_FLAG} ${MPIEXEC_NUMPROC_FLAG})
if (CMAKE_VERSION VERSION_LESS 3.0.0)
    INCLUDE(CMakeForceCompiler)
    CMAKE_FORCE_CXX_COMPILER(${MPI_COMPILER} "MPI C++ Compiler")
else()
    # jfa: this is really ugly, but provides compatibility 
    # with both CMake 2 and 3
    include_directories(${MPI_CXX_INCLUDE_PATH})
    link_libraries(${MPI_CXX_LIBRARIES})
endif ()


# boost
message(STATUS "Looking for Boost (not yet boost_python)")
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREAD ON)
find_package(Boost
             COMPONENTS regex unit_test_framework serialization
                        filesystem system REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})
# Now we have Boost_VERSION set, and we can use it to figure out if we need
# to look for the component python (for old versions, before 1.67) or python27
# (for boost 1.67 and newer).
# We want PYTHON_QUAL set to:
#    nothing, for old boost and for use of python 2,
#    27, for new boost and for use of python 2,
#    3, for use of python 3 (for all supported boost versions)
if (USE_PYTHON_3)
  # Guessing when we need PYTHON_QUAL 3 vs. 37.
  # On Ubuntu 18.04, with its system cmake, and system boost_python, we need 3
  # On Ubuntu 16.04, with an updated cmake and the system boost_python 1.58, we need 35
  # On Darwin, with cmake 3.14.6, and boost 1.70.0, and boost_python 1.70.0.1, we need 37
  if (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    set(PYTHON_QUAL 37)
  else()
    if (${Boost_VERSION} LESS 105900) # not sure of what the exact cutoff should be
      set(PYTHON_QUAL 35)
    else()
      set(PYTHON_QUAL 3)
    endif()
  endif()
else()
  if(NOT ${Boost_VERSION} LESS 106700)
    set(PYTHON_QUAL 27)
  endif()
endif()

set(Boost_NO_BOOST_CMAKE ON) # Do *not* use CMake support from Boost.
message(STATUS "Looking for boost_python, as component python${PYTHON_QUAL}")
find_package(Boost COMPONENTS python${PYTHON_QUAL} REQUIRED)
# Now Boost_LIBRARIES is set to only the boost_python library...
set(REAL_BOOST_PYTHON_LIBRARY ${Boost_LIBRARIES})
link_directories(${Boost_LIBRARY_DIRS})
message(STATUS "Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS}")
message(STATUS "Boost_LIBRARY_DIRS = ${Boost_LIBRARY_DIRS}")
message(STATUS "Boost_LIBRARIES = ${Boost_LIBRARIES}")
message(STATUS "Boost_PYTHON_LIBRARY = ${Boost_PYTHON_LIBRARY}")

# hdf5
find_package(HDF5)
include_directories(${HDF5_INCLUDE_DIRS})
message(${HDF5_LIBRARIES})

# chef
find_package(CHEF REQUIRED)
include_directories(${CHEF_INCLUDE_DIR})
link_directories(${CHEF_LIB_DIR})

# numpy
find_package(NUMPY REQUIRED)
include_directories(${NUMPY_INCLUDE_DIR})

if (BUILD_PYTHON_BINDINGS)
    # mpi4py
    find_package(MPI4PY REQUIRED)
    include_directories(${MPI4PY_INCLUDE_DIR})
endif()

# misc
INCLUDE(${SYNERGIA2_SOURCE_DIR}/CMake/AddPythonExtension.cmake)
INCLUDE(${SYNERGIA2_SOURCE_DIR}/CMake/FindGSL.cmake)
include_directories(${GSL_INCLUDE_DIR})

# Eigen3
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})

# fftw3 (and, possibly, fftw2)
find_package(FFTW3 REQUIRED)
if(FFTW3_MPI_FOUND)
    include_directories(${FFTW3_INCLUDE_DIR})
    set(PARALLEL_FFTW_LIBRARIES ${FFTW3_MPI_LIBRARIES} ${FFTW3_LIBRARIES})
    if(NOT PARALLEL_FFTW_FOUND)
        message("-- Using FFTW3 for parallel FFTs")
        set(PARALLEL_FFTW_FOUND TRUE CACHE BOOL "found parallel fftw" FORCE)
    endif(NOT PARALLEL_FFTW_FOUND)
else(FFTW3_MPI_FOUND)
    message("-- FFTW3 MPI libraries not found, trying FFTW2")
    find_package(FFTW2)
    if(NOT FFTW2_MPI_FOUND)
        message(FATAL_ERROR "Synergia requires either FFTW2 or FFT3 compiled with MPI support.")
    endif(NOT FFTW2_MPI_FOUND)
    include_directories(${FFTW2_INCLUDE_DIR})
    set(PARALLEL_FFTW_LIBRARIES ${FFTW2_MPI_LIBRARIES} ${FFTW2_LIBRARIES})
    add_definitions(-DUSE_FFTW2)
    if(NOT PARALLEL_FFTW_FOUND)
        message("-- Using FFTW2 for parallel FFTs")
        set(PARALLEL_FFTW_FOUND TRUE CACHE BOOL "found parallel fftw" FORCE)
    endif(NOT PARALLEL_FFTW_FOUND)
endif(FFTW3_MPI_FOUND)

# for eclipse only
IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmessage-length=0")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DBOOST_DISABLE_ASSERTS")

if(ENABLE_WARNINGS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
endif(ENABLE_WARNINGS)

if(WARNINGS_ARE_ERRORS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
endif(WARNINGS_ARE_ERRORS)

if(CLANG_FIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif(CLANG_FIX)

# Additional CXXFLAGS
if(EXTRA_CXX_FLAGS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EXTRA_CXX_FLAGS}")
endif(EXTRA_CXX_FLAGS)

if(USE_SIMPLE_TIMER)
    message("-- Simple timer profiling enabled")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SIMPLE_TIMER")
    if(USE_SIMPLE_TIMER_BARRIER)
        message("-- Simple timer MPI_Barrier enabled")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SIMPLE_TIMER_BARRIER")
    endif(USE_SIMPLE_TIMER_BARRIER)
    if(USE_SIMPLE_TIMER_MEM)
        message("-- Simple timer memory profiling enabled")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SIMPLE_TIMER_MEM")
    endif(USE_SIMPLE_TIMER_MEM)
endif(USE_SIMPLE_TIMER)

# Additional CXXFLAGS
if(EXTRA_CXX_FLAGS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EXTRA_CXX_FLAGS}")
endif(EXTRA_CXX_FLAGS)

# External libraries generate many warnings
#add_definitions(-Wall -pedantic -Wno-long-long)

set(CHEF_LIBRARY_DIRS_EXPANDED "")
foreach(dir ${CHEF_LIBRARY_DIRS})
    set(CHEF_LIBRARY_DIRS_EXPANDED "${CHEF_LIBRARY_DIRS_EXPANDED} \"${dir}\"")
endforeach(dir)

configure_file("${SYNERGIA2_SOURCE_DIR}/synergia-local.in"
    "${SYNERGIA2_BINARY_DIR}/synergia-local" IMMEDIATE)

configure_file("${SYNERGIA2_SOURCE_DIR}/src/local_paths.py.in"
    "${SYNERGIA2_BINARY_DIR}/src/local_paths.py" IMMEDIATE)

include_directories(BEFORE ${SYNERGIA2_SOURCE_DIR}/src)

# Are we building shared or static (shared is the default)?
if (NOT DEFINED BUILD_SHARED_LIBS)
  if (NOT $ENV{BUILD_SHARED_LIBS} STREQUAL "")
    set (BUILD_SHARED_LIBS $ENV{BUILD_SHARED_LIBS})
  else ()
    set (BUILD_SHARED_LIBS TRUE)
  endif ()
endif ()

if (BUILD_SHARED_LIBS)
  message (STATUS "Building shared libraries")
else ()
    # This prevents multiple-definition errors.
    set(CMAKE_EXE_LINKER_FLAGS
         "${CMAKE_EXE_LINKER_FLAGS} -Wl,--allow-multiple-definition")
  message (STATUS "Building static libraries")
endif ()

# We should probably warn someone trying to build static libraries along with
#  the python bindings since it won't work with python.
# The python bindings will still be build shared.
if ( (NOT BUILD_SHARED_LIBS) AND BUILD_PYTHON_BINDINGS )
  message(WARNING "Static library build selected, ignored for python bindings")
endif ()

function(add_test_executable name)
#  add_executable(${name} EXCLUDE_FROM_ALL ${ARGN})
  add_executable(${name} ${ARGN})
  if(NOT TARGET test-exes)
    add_custom_target(test-exes)
  endif()
  add_dependencies(test-exes ${name})
endfunction()

add_custom_target(check
  COMMAND ${CMAKE_CTEST_COMMAND}
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
  COMMENT "Running ctest")
add_dependencies(check test-exes)

add_subdirectory(src)
add_subdirectory(examples)
add_subdirectory(archived-applications)
add_subdirectory(docs)
add_subdirectory(synergia-script-templates)

